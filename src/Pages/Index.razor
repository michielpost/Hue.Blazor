@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BlazorColorPicker
@using Q42.HueApi
@using Q42.HueApi.ColorConverters
@using Q42.HueApi.ColorConverters.HSB

<h1>Hue Blazor</h1>
<link href="_content/BlazorColorPicker/colorpicker.css" rel="stylesheet" />

@if (!string.IsNullOrEmpty(ip))
{
    <p>Bridge IP: @ip</p>
}
else
{
    <button class="btn btn-primary" @onclick="FindBridge">Find bridge!</button>
}

@if (!string.IsNullOrEmpty(apiKey))
{
    <p>Registered with bridge</p>
}
else if (!string.IsNullOrEmpty(ip))
{
    <p>First push the button on your bridge, then click on Register app:</p>
    <button class="btn btn-primary" @onclick="RegisterApp">Register app</button>
}



@if (!string.IsNullOrEmpty(apiKey))
{
    <button class="btn btn-primary" @onclick="OpenModal">
        <div style="background-color:@color" class="buttonColor"></div> Select a Color
    </button>

    <ColorPicker Title="My Blazor ColorPicker" IsOpened="isOpened" Closed="ClosedEvent" MyColor="@color">
    </ColorPicker>
}



@code {

    private string ip = "";
    private string apiKey = "";

    private readonly string STORAGE_KEY_IP = "ip";
    private readonly string STORAGE_KEY_API = "api";

    Q42.HueApi.LocalHueClient hueClient;


    protected override async Task OnInitializedAsync()
    {
        bool hasIp = await localStorage.ContainKeyAsync(STORAGE_KEY_IP);
        if (hasIp)
        {
            ip = await localStorage.GetItemAsync<string>(STORAGE_KEY_IP);
        }

        bool hasApiKey = await localStorage.ContainKeyAsync(STORAGE_KEY_API);
        if (hasApiKey)
        {
            apiKey = await localStorage.GetItemAsync<string>(STORAGE_KEY_API);
        }

        CreateHueClient();
    }

    private void CreateHueClient()
    {
        if (!string.IsNullOrEmpty(apiKey) && !string.IsNullOrEmpty(ip))
        {
            hueClient = new Q42.HueApi.LocalHueClient(ip, apiKey);
        }
        else if (!string.IsNullOrEmpty(ip))
        {
            hueClient = new Q42.HueApi.LocalHueClient(ip);
        }
    }


    private async Task FindBridge()
    {
        var locator = new Q42.HueApi.HttpBridgeLocator();
        var bridges = await locator.LocateBridgesAsync(TimeSpan.FromSeconds(5));
        if (bridges.Any())
        {
            ip = bridges.First().IpAddress;
            await localStorage.SetItemAsync(STORAGE_KEY_IP, ip);

            CreateHueClient();

        }
        else
        {
            ip = "No bridge ip found.";
        }
    }

    private async Task RegisterApp()
    {
        var result = await hueClient.RegisterAsync("blazorhue", "browser");
        if (!string.IsNullOrEmpty(result))
        {
            apiKey = result;
            await localStorage.SetItemAsync(STORAGE_KEY_API, apiKey);

            CreateHueClient();
        }
    }

    bool isOpened = false;
    string color = "#F1F7E9";

    void OpenModal()
    {
        isOpened = true;
    }

    Task ClosedEvent(string value)
    {
        color = value;
        isOpened = false;

        Q42.HueApi.LightCommand lightCommand = new Q42.HueApi.LightCommand();
        lightCommand.On = true;
        lightCommand.SetColor(new RGBColor(color));

        return hueClient.SendGroupCommandAsync(lightCommand);
    }
}
