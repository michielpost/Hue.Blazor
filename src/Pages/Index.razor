@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BlazorColorPicker
@using HueApi
@using HueApi.ColorConverters
@using HueApi.ColorConverters.Original
@using HueApi.ColorConverters.Original.Extensions
@using Hue.Blazor.Models
@using HueApi.Models.Requests

<h1>Hue Blazor</h1>

@if (!string.IsNullOrEmpty(ip))
{
    <p>Bridge IP: @ip</p>
}
else
{
    <button class="btn btn-primary" @onclick="FindBridge">Find bridge!</button>
}

@if (!string.IsNullOrEmpty(apiKey))
{
    <p>Registered with bridge</p>
}
else if (!string.IsNullOrEmpty(ip))
{
    <p>First push the button on your bridge, then click on Register app:</p>
    <button class="btn btn-primary" @onclick="RegisterApp">Register app</button>
}



@if (!string.IsNullOrEmpty(apiKey))
{
    <button class="btn btn-primary" @onclick="@(e => OpenModal(Guid.Empty))">
        <div style="background-color:@color" class="buttonColor"></div> Select a Color
    </button>


}

<div class="my-3 p-3 bg-white rounded shadow-sm">

    @foreach (var group in vm.Groups)
    {
        <h2>@group.Name</h2>
        <p>
            <button class="btn btn-primary" @onclick="@(e => GroupOn(group.Id))">On</button>
            <button class="btn btn-primary" @onclick="@(e => GroupOff(group.Id))">Off</button>
            <button class="btn btn-primary" @onclick="@(e => OpenModal(group.Id))">
                <div style="background-color:@color" class="buttonColor"></div> Select a Color
            </button>
        </p>
        <p>
            <br />
            @foreach (var light in group.Lights)
            {
                if (light.IsOn)
                {
                    <img src="images/bulb button on.png" height="50" @onclick="@(e => LightOff(light.Id))" /> @light.Name <br />
                }
                else
                {
                    <img src="images/bulb button.png" height="50" @onclick="@(e => LightOn(light.Id))" /> @light.Name <br />
                }


            }
        </p>
    }

</div>

<ColorPicker Title="Hue ColorPicker" IsOpened="isOpened" Closed="ClosedEvent" MyColor="@color">
</ColorPicker>


<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />


@code {

    private string ip = "";
    private string apiKey = "";

    private readonly string STORAGE_KEY_IP = "ip";
    private readonly string STORAGE_KEY_API = "api";

    HueApi.LocalHueApi? hueClient;


    protected override async Task OnInitializedAsync()
    {
        bool hasIp = await localStorage.ContainKeyAsync(STORAGE_KEY_IP);
        if (hasIp)
        {
            ip = await localStorage.GetItemAsync<string>(STORAGE_KEY_IP);
        }

        bool hasApiKey = await localStorage.ContainKeyAsync(STORAGE_KEY_API);
        if (hasApiKey)
        {
            apiKey = await localStorage.GetItemAsync<string>(STORAGE_KEY_API);
        }

        await CreateHueClient();
    }

    private async Task CreateHueClient()
    {
        if (!string.IsNullOrEmpty(apiKey) && !string.IsNullOrEmpty(ip))
        {
            hueClient = new HueApi.LocalHueApi(ip, apiKey, new HttpClient());

            await LoadLights();
        }
        else if (!string.IsNullOrEmpty(ip))
        {
            hueClient = new HueApi.LocalHueApi(ip, null, new HttpClient());
        }
    }


    private async Task FindBridge()
    {
        var locator = new HueApi.BridgeLocator.HttpBridgeLocator();
        var bridges = await locator.LocateBridgesAsync(TimeSpan.FromSeconds(5));
        if (bridges.Any())
        {
            ip = bridges.First().IpAddress;
            await localStorage.SetItemAsync(STORAGE_KEY_IP, ip);

            CreateHueClient();

        }
        else
        {
            ip = "No bridge ip found.";
        }
    }

    private async Task RegisterApp()
    {
        var result = await LocalHueApi.RegisterAsync(ip, "blazorhue", "browser");
        if (!string.IsNullOrEmpty(result?.Username))
        {
            apiKey = result.Username;
            await localStorage.SetItemAsync(STORAGE_KEY_API, apiKey);

            CreateHueClient();
        }
    }

    MainViewModel vm = new MainViewModel();
    private async Task LoadLights()
    {
        var lights = await hueClient.GetLightsAsync();
        var groups = await hueClient.GetGroupedLightsAsync();

        foreach (var group in groups.Data)
        {
            var groupVm = new GroupViewModel()
                {
                    Id = group.Id,
                    Name = group.Metadata.Name
                };

            //foreach (var lightId in group.Lights)
            //{
            //    var lightInfo = lights.Where(x => x.Id == lightId).FirstOrDefault();

            //    var lightVm = new LightViewModel()
            //        {
            //            Id = lightId,
            //            Name = lightInfo.Name,
            //            IsOn = lightInfo.State.On,
            //            Color = lightInfo.State.ToHex()
            //        };

            //    groupVm.Lights.Add(lightVm);
            //}

            vm.Groups.Add(groupVm);
        }
    }

    private Task GroupOn(Guid groupId)
    {
        var lightCommand = new UpdateGroupedLight();
        lightCommand.TurnOn();
        lightCommand.SetColor(new RGBColor("#F1F7E9"));

        var group = vm.Groups.Where(x => x.Id == groupId).FirstOrDefault();
        foreach (var light in group.Lights)
        {
            light.IsOn = true;
        }

        return hueClient.UpdateGroupedLightAsync(groupId, lightCommand);
    }

    private Task GroupOff(Guid groupId)
    {
        var lightCommand = new UpdateGroupedLight();
        lightCommand.TurnOff();

        var group = vm.Groups.Where(x => x.Id == groupId).FirstOrDefault();
        foreach (var light in group.Lights)
        {
            light.IsOn = false;
        }

        return hueClient.UpdateGroupedLightAsync(groupId, lightCommand);
    }

    private Task LightOn(Guid lightId)
    {
        var lightCommand = new UpdateLight();
        lightCommand.TurnOn();
        lightCommand.SetColor(new RGBColor("#F1F7E9"));

        var light = vm.Groups.SelectMany(x => x.Lights).Where(x => x.Id == lightId).FirstOrDefault();
        light.IsOn = true;

        return hueClient.UpdateLightAsync(lightId, lightCommand);
    }

    private Task LightOff(Guid lightId)
    {
        var lightCommand = new UpdateLight();
        lightCommand.TurnOff();

        var light = vm.Groups.SelectMany(x => x.Lights).Where(x => x.Id == lightId).FirstOrDefault();
        light.IsOn = false;

        return hueClient.UpdateLightAsync(lightId, lightCommand);
    }


    bool isOpened = false;
    string color = "#F1F7E9";
    Guid colorPickerGroupId;

    void OpenModal(Guid groupId)
    {
        isOpened = true;
        colorPickerGroupId = groupId;
    }

    Task ClosedEvent(string value)
    {
        color = value;
        isOpened = false;

        var lightCommand = new UpdateGroupedLight();
        lightCommand.TurnOn();
        lightCommand.SetColor(new RGBColor(color));

        return hueClient.UpdateGroupedLightAsync(colorPickerGroupId, lightCommand);
    }
}
